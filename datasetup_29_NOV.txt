/*
* Class Name	: DataSetup 
* Description	: This class is used to  create test records for Objects mentioned in SObject_Data_Sync_Configuration__mdt 
*/
public class DataSetup implements Database.Batchable<sObject>,Database.AllowsCallouts, Database.Stateful {
    
    private SObject_Data_Sync_Configuration__mdt currentsObject;
    private List<String> parentRelations = new List<String>();
    private String accessToken;
    private OAuth objAuthenticationInfo;
    private Map<String,Map<String,String>> objectNameToOld_NewId = new Map<String,Map<String,String>>();// Account-[oldId-NewId]
    private Map<String,String> targetAccountRecordTypeNameToIdMap ;//=  fetchAccountRecordTypeNameToIdMap();
    private Map<String,String> sourceAccountRecordTypeNameToIdMap ;//=  getAccountRecordTypeFromSource();
    
    String sObjectAPIName;
    //Constructor to assign value to obj string.
    public DataSetup(String sObjectAPIName,Map<String,Map<String,String>> objectNameToOld_NewId)
    {
        this.sObjectAPIName=sObjectAPIName;
        this.objectNameToOld_NewId=objectNameToOld_NewId;
    }
    public DataSetup()
    {
    }
    /*
* Method Name	: fetchAccountRecordTypeNameToIdMap
* Description	: This method fetch the record type and creates a Map .
*/
    public  Map<String,String> fetchAccountRecordTypeNameToIdMap(){
        Map<String,String> targetAccountRecordTypeNameToIdMap = new Map<String,String>();
        List<RecordType> recordTypeList =  new List<RecordType>();
        recordTypeList = [Select Id,Name,developername FROM recordtype where SobjectType = :StaticDataFactory.accountString];
        System.debug(recordTypeList);
        for(RecordType recordTypeVar : recordTypeList){
            targetAccountRecordTypeNameToIdMap.put(recordTypeVar.developername,recordTypeVar.Id);
        }
        return targetAccountRecordTypeNameToIdMap;
    }
    /*
* Method Name	: getAccountRecordTypeFromSource
* Description	: This method fetch the record types from the sourceOrg and creates a Map .
*/
    public Map<String,String> getAccountRecordTypeFromSource(){
        Map<String,String> sourceAccountRecordTypeNameToIdMap = new Map<String,String>();
        objAuthenticationInfo = getAccessToken();
        accessToken = objAuthenticationInfo.access_token;
        String endpointUrl =  objAuthenticationInfo.instance_url+'/services/data/v49.0/query/?q=Select+Id,Name,developerName+FROM+Recordtype+where+SobjectType=\'Account\'';
        Map<String, Object> responseMap = fetchSobejctData(endpointUrl);
        List<Sobject> recordTypeList = (List<Sobject>)JSON.deserialize(JSON.serializePretty(responseMap.get(StaticDataFactory.records)), List<Sobject>.Class);
        for(Sobject sobjectvar : recordTypeList ){
            sourceAccountRecordTypeNameToIdMap.put( String.valueOf(sobjectvar.get('Id')) , String.valueOf(sobjectvar.get('DeveloperName')) ) ;
        }
        return sourceAccountRecordTypeNameToIdMap;                                            
        
    }
    public Database.QueryLocator start(Database.BatchableContext BC) {
        // collect the batches of records or objects to be passed to execute
        String query;
        if(Test.isRunningTest())
            query = 'Select Id,Filter_Mode__c,SObjectRecordLimit__c,order__c,sObjectAPIName__c,Fields__c,Parent_Relations__c from SObject_Data_Sync_Configuration__mdt  where sObjectAPIName__c=\''+sObjectAPIName+'\'';
        else
            query = 'Select Id,Filter_Mode__c,SObjectRecordLimit__c,order__c,sObjectAPIName__c,Fields__c,Parent_Relations__c from SObject_Data_Sync_Configuration__mdt  order by Order__c asc ';
        
        return Database.getQueryLocator(query);
        
    }
    /*
* Method Name	: retrieveFilterOfObject
* Description	: This method will return the filter for a particular Sobject .
*/
    public String retrieveFilterOfObject(){
        // need disucssion for child objects filters or use map to use filter for each object.
        try{
            String filterMode;
            filterMode='+'+currentsObject.Filter_Mode__c+'+';
            List<SObject_Data_Sync_Configuration_Filters__mdt> filtersList = new List<SObject_Data_Sync_Configuration_Filters__mdt>();
            filtersList = [Select Filter_Field__c,Filter_Value__c,SObject_Data_Sync_Configuration__c,Filter_Type__c,isActive__c from SObject_Data_Sync_Configuration_Filters__mdt where SObject_Data_Sync_Configuration__c=:currentsObject.Id and isActive__c = true ];
            System.debug('filtersList------------>'+filtersList);
            // adding records for test class data
            if(Test.isRunningTest()){
                SObject_Data_Sync_Configuration_Filters__mdt filterrec1 = new SObject_Data_Sync_Configuration_Filters__mdt();
                SObject_Data_Sync_Configuration_Filters__mdt filterrec2 = new SObject_Data_Sync_Configuration_Filters__mdt();
                filtersList =  new List<SObject_Data_Sync_Configuration_Filters__mdt>();
                if(currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzProduct ){
                    
                    filterrec1.Filter_Field__c = 'ccrz__Taxable__c';
                    filterrec1.Filter_Value__c = 'true';
                    
                    filterrec2.Filter_Field__c = 'ccrz__Taxable__c';
                    filterrec2.Filter_Value__c = 'false';
                    
                    filtersList.add(filterrec1); filtersList.add(filterrec2);
                }
                else if(currentsObject.sObjectAPIName__c == 'ccrz__E_AccountGroupPriceList__c' ){
                    filterrec1.Filter_Field__c = 'ccrz__Sequence__c';
                    filterrec1.Filter_Value__c = '1';
                    
                    filterrec2.Filter_Field__c = 'ccrz__Sequence__c';
                    filterrec2.Filter_Value__c = '2';
                    
                    filtersList.add(filterrec1); filtersList.add(filterrec2);
                }
                else if(currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzPriceList ){
                    filterrec1.Filter_Field__c = 'ccrz__DataId__c';
                    filterrec1.Filter_Value__c = '1';
                    filterrec1.Filter_Type__c = 'Exact Match';
                    
                    filterrec2.Filter_Field__c = 'ccrz__DataId__c';
                    filterrec2.Filter_Value__c = '2';
                    filterrec2.Filter_Type__c = 'Exact Match';
                    
                    filtersList.add(filterrec1); filtersList.add(filterrec2);
                }
                else if(currentsObject.sObjectAPIName__c == 'ccrz__E_PriceListItem__c' ){
                    filterrec1.Filter_Field__c = 'Custom_PricingUOM__c';
                    filterrec1.Filter_Value__c = '1';
                    filterrec1.Filter_Type__c = 'LIKE';
                    
                    filterrec2.Filter_Field__c = 'Custom_PricingUOM__c';
                    filterrec2.Filter_Value__c = '2';
                    filterrec2.Filter_Type__c = 'LIKE';
                    
                    filtersList.add(filterrec1); filtersList.add(filterrec2);
                }
                else if(currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzAccountGroup ){
                    
                    filterrec1.Filter_Field__c = 'ccrz__AccountGroupID__c';
                    filterrec1.Filter_Value__c = '1';
                    filterrec1.Filter_Type__c = 'IN';
                    
                    filterrec2.Filter_Field__c = 'ccrz__AccountGroupID__c';
                    filterrec2.Filter_Value__c = '2';
                    filterrec2.Filter_Type__c = 'IN';
                    
                    filtersList.add(filterrec1); filtersList.add(filterrec2);
                }
                else if(currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzConfiguration ){
                    
                    filterrec1.Filter_Field__c = 'ccrz__ConfigurationMeta__c';
                    filterrec1.Filter_Value__c = 'a0M2h000000TsCM';
                    filterrec1.Filter_Type__c = 'IN';
                    
                    filterrec2.Filter_Field__c = 'ccrz__ConfigurationMeta__c';
                    filterrec2.Filter_Value__c = 'a0M2h000000TsCR';
                    filterrec2.Filter_Type__c = 'IN';
                    
                    filtersList.add(filterrec1); filtersList.add(filterrec2);
                    currentsObject.SObjectRecordLimit__c = 2;
                }
            }
            Schema.DisplayType fieldtype;
            SObjectType sObjectTypeVar = ((SObject)(Type.forName('Schema.'+currentsObject.sObjectAPIName__c).newInstance())).getSObjectType();
            DescribeSObjectResult describeSObjectResultVar = SObjectTypeVar.getDescribe();
            String whereClause='';
            for(SObject_Data_Sync_Configuration_Filters__mdt filtermdt : filtersList){
                System.debug('type of field---->'+describeSObjectResultVar.fields.getMap().get(filtermdt.Filter_Field__c).getDescribe().getType());
                fieldtype = describeSObjectResultVar.fields.getMap().get(filtermdt.Filter_Field__c).getDescribe().getType();
                if( fieldtype == Schema.DisplayType.STRING ){
                    if(filtermdt.Filter_Type__c == 'Exact Match'){
                        if(whereClause == ''){
                            whereClause = StaticDataFactory.whereWithSpace+filtermdt.Filter_Field__c+'='+'\''+filtermdt.Filter_Value__c+'\'';
                        }else{
                            whereClause=whereClause+filterMode+filtermdt.Filter_Field__c+'='+'\''+filtermdt.Filter_Value__c+'\'';
                        }
                        
                    }
                    else if(filtermdt.Filter_Type__c == 'LIKE'){
                        if(whereClause == ''){
                            whereClause = StaticDataFactory.whereWithSpace+filtermdt.Filter_Field__c+'+LIKE+'+'\''+StaticDataFactory.percent25+filtermdt.Filter_Value__c+StaticDataFactory.percent25+'\'';
                        }else{
                            whereClause=whereClause+filterMode+filtermdt.Filter_Field__c+'+LIKE+'+'\''+StaticDataFactory.percent25+filtermdt.Filter_Value__c+StaticDataFactory.percent25+'\'';
                        }
                        
                    }
                    else if(filtermdt.Filter_Type__c == 'IN'){
                        String ee = filtermdt.Filter_Value__c.replace(',',StaticDataFactory.replaceValue);
                        System.debug('ee-->'+ee);
                        if(whereClause == ''){
                            whereClause = StaticDataFactory.whereWithSpace+filtermdt.Filter_Field__c+StaticDataFactory.inWithSpace+StaticDataFactory.openingBracket+filtermdt.Filter_Value__c.replace(',',StaticDataFactory.replaceValue )+StaticDataFactory.closingBracket;
                        }else{
                            whereClause=whereClause+filterMode+filtermdt.Filter_Field__c+StaticDataFactory.inWithSpace+StaticDataFactory.openingBracket+filtermdt.Filter_Value__c.replace(',', StaticDataFactory.replaceValue)+StaticDataFactory.closingBracket;
                        }
                        
                    }
                    
                }
                else if(fieldtype == Schema.DisplayType.BOOLEAN){
                    if(whereClause == ''){
                        whereClause = StaticDataFactory.whereWithSpace+filtermdt.Filter_Field__c+StaticDataFactory.equalWithSpace+filtermdt.Filter_Value__c;
                    }else{
                        whereClause=whereClause+filterMode+filtermdt.Filter_Field__c+StaticDataFactory.equalWithSpace+filtermdt.Filter_Value__c;
                    }
                }
                else if(fieldtype == Schema.DisplayType.INTEGER || fieldtype == Schema.DisplayType.DOUBLE){
                    if(whereClause == ''){
                        whereClause = StaticDataFactory.whereWithSpace+filtermdt.Filter_Field__c+StaticDataFactory.equalWithSpace+filtermdt.Filter_Value__c;
                    }else{
                        whereClause=whereClause+'filterMode'+filtermdt.Filter_Field__c+StaticDataFactory.equalWithSpace+filtermdt.Filter_Value__c;
                    }
                }
                else if(fieldtype == Schema.DisplayType.REFERENCE){
                    if(whereClause == ''){
                        whereClause = StaticDataFactory.whereWithSpace+filtermdt.Filter_Field__c+StaticDataFactory.inWithSpace+StaticDataFactory.openingBracket+filtermdt.Filter_Value__c.replace(',',StaticDataFactory.replaceValue)+StaticDataFactory.closingBracket;
                    }else{
                        whereClause=whereClause+filterMode+filtermdt.Filter_Field__c+StaticDataFactory.inWithSpace+StaticDataFactory.openingBracket+filtermdt.Filter_Value__c.replace(',', StaticDataFactory.replaceValue)+StaticDataFactory.closingBracket;
                    }
                }
            }
            System.debug('whereClause->'+whereClause);
            if(whereClause != null && whereClause!=''){
                whereClause = whereClause+')'; 
            }
            
            System.debug('whereClause->'+whereClause);
            return whereClause;
        }catch(Exception e){
            System.debug('retrieveFilterOfObject get exeption on line number-->'+e.getLineNumber()+' error is-->'+e.getMessage());
            return null;
        }
        
        
    }
    
    /*
* Method Name	: removeKeysFromMap
* Description	: This method  removes the non-required keys from MAP
*/
    public void removeKeysFromMap(){
        if(currentsObject.sObjectAPIName__c == 'ccrz__E_ConfigurationModule__c'){
            objectNameToOld_NewId.remove('ccrz__E_PageLabel__c'.toLowerCase());
            
        }else if(currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzConfiguration){
            objectNameToOld_NewId.remove('ccrz__E_ConfigurationModule__c'.toLowerCase());
        }
        else if(currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzAccountGroup){
            objectNameToOld_NewId.remove(StaticDataFactory.ccrzConfiguration.toLowerCase());
            objectNameToOld_NewId.remove('ccrz__E_ConfigurationMeta__c'.toLowerCase());
        }
        else if(currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzProduct){
            objectNameToOld_NewId.remove('ccrz__E_AccountGroupPriceList__c'.toLowerCase());
            objectNameToOld_NewId.remove(StaticDataFactory.ccrzAccountGroup.toLowerCase());
            objectNameToOld_NewId.remove(StaticDataFactory.accountString.toLowerCase());
            objectNameToOld_NewId.remove('Contact'.toLowerCase());
        }
        else if(currentsObject.sObjectAPIName__c == 'ccrz__E_Spec__c'){
            objectNameToOld_NewId.remove('ccrz__E_PriceListItem__c'.toLowerCase());
            objectNameToOld_NewId.remove(StaticDataFactory.ccrzPriceList.toLowerCase());
        }
        else if(currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzProductMedia){
            objectNameToOld_NewId.remove(StaticDataFactory.ccrzProductSpec.toLowerCase());
            objectNameToOld_NewId.remove('ccrz__E_Spec__c'.toLowerCase());
        }
        else if(currentsObject.sObjectAPIName__c == 'ccrz__E_RelatedProduct__c'){
            objectNameToOld_NewId.remove(StaticDataFactory.ccrzProductMedia.toLowerCase());
        }else if(currentsObject.sObjectAPIName__c == 'ccrz__E_Category__c'){
            objectNameToOld_NewId.remove('ccrz__E_RelatedProduct__c'.toLowerCase());
        }else if(currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzProductCategory){
            objectNameToOld_NewId.remove(StaticDataFactory.ccrzMenu.toLowerCase());
        }
    }
    
    /*
* Method Name	: createInquery
* Description	: This method  creates the Ids in commaseparated
*/
    public string createInquery(set<String> Idset , Integer idCount){
        String Ids = '';
        Integer Counter = 0;
        for(String parentId :Idset ){
            if(idCount == Counter ){
                break; 
            }
            Counter = Counter + 1;
            if(Ids ==''){
                Ids =   '\''+parentId+'\'';
            }else{
                Ids =Ids+','+ '\''+parentId+'\'';   
            }
        }
        return Ids;
    }
    
    /*
* Method Name	: createInquery
* Description	: This method  creates return the endpointURL for Sobjects
*/
    public String returnEndpointURL(String whereClause,String Ids, List<String> parentRelationInfo){
        String endpointUrl;
        if(whereClause !=null && whereClause!='' ){
            if( currentsObject.SObjectRecordLimit__c !=null ){
                System.debug('*********11************');
                endpointUrl = objAuthenticationInfo.instance_url+StaticDataFactory.endURL+StaticDataFactory.selectwithSpace+StaticDataFactory.selectId+currentsObject.Fields__c +StaticDataFactory.fromWithSpace +parentRelationInfo[2]+whereclause+'+LIMIT+'+integer.valueOf(currentsObject.SObjectRecordLimit__c)+')'+StaticDataFactory.fromWithSpace+parentRelationInfo[0]+StaticDataFactory.whereWithId+Ids;
            }else{
                System.debug('*********22************');
                endpointUrl = objAuthenticationInfo.instance_url+StaticDataFactory.endURL+StaticDataFactory.selectwithSpace+StaticDataFactory.selectId+currentsObject.Fields__c +StaticDataFactory.fromWithSpace +parentRelationInfo[2]+whereclause+')'+StaticDataFactory.fromWithSpace+parentRelationInfo[0]+StaticDataFactory.whereWithId+Ids;
            }  
        }else{
            if( currentsObject.SObjectRecordLimit__c !=null ){
                System.debug('*********1************');
                endpointUrl = objAuthenticationInfo.instance_url+StaticDataFactory.endURL+StaticDataFactory.selectwithSpace+StaticDataFactory.selectId+currentsObject.Fields__c +StaticDataFactory.fromWithSpace +parentRelationInfo[2]+'+LIMIT+'+integer.valueOf(currentsObject.SObjectRecordLimit__c)+')'+StaticDataFactory.fromWithSpace+parentRelationInfo[0]+StaticDataFactory.whereWithId+Ids;
            }else{ 
                System.debug('*********2************');
                endpointUrl = objAuthenticationInfo.instance_url+StaticDataFactory.endURL+StaticDataFactory.selectwithSpace+StaticDataFactory.selectId+currentsObject.Fields__c +StaticDataFactory.fromWithSpace +parentRelationInfo[2]+')'+StaticDataFactory.fromWithSpace+parentRelationInfo[0]+StaticDataFactory.whereWithId+Ids;
            }   
        }
        return endpointUrl;
    }
    
    
    /*
* Method Name	: execute
* Description	: This method  Process a single Sobject
*/
    public void execute(Database.BatchableContext BC, List<SObject_Data_Sync_Configuration__mdt> confugurationList) {	// expecting a single record here
        try{
            
            currentsObject = confugurationList[0];
            if(currentsObject.sObjectAPIName__c == StaticDataFactory.accountString){
                targetAccountRecordTypeNameToIdMap =   fetchAccountRecordTypeNameToIdMap();
                sourceAccountRecordTypeNameToIdMap  =  getAccountRecordTypeFromSource();
                
            }
            //remove all the keys from map which are not required
            removeKeysFromMap();
            System.debug('sourceAccountRecordTypeNameToIdMap-->'+sourceAccountRecordTypeNameToIdMap);
            System.debug('targetAccountRecordTypeNameToIdMap-->'+targetAccountRecordTypeNameToIdMap);
            parentRelations = new List<String>();
            List<String> parentRelationInfo = new List<String>();
            //List<Sobject> sobjectList = new List<Sobject>();
            //List<Sobject> sobjectListClone = new List<Sobject>();
            
            System.debug('config------------>'+currentsObject);  
            objAuthenticationInfo = getAccessToken();
            accessToken = objAuthenticationInfo.access_token;
            String endpointUrl = '';
            // if there is  parent for this sobject
            if( (currentsObject.Parent_Relations__c != '' && currentsObject.Parent_Relations__c != null) &&
               !(currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzMenu 
                 || currentsObject.sObjectAPIName__c == 'ccrz__E_ConfigurationMeta__c'
                 || currentsObject.sObjectAPIName__c == 'ccrz__E_ConfigurationModule__c'  ||
                 currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzConfiguration) ){
                     System.debug('******************');
                     System.debug('*************parent relations*****'+currentsObject.Parent_Relations__c);
                     //reteieve only those child objects records which are related to the parent
                     parentRelations = currentsObject.Parent_Relations__c.split('-');
                     parentRelationInfo = parentRelations[0].split('/');
                     System.debug('objectNameToOld_NewId-Keys-'+objectNameToOld_NewId);
                     for(String mapKeys : objectNameToOld_NewId.keySet()){
                         System.debug('exec KEY PRESENT IN MAP------>'+mapKeys);
                         
                     }
                     String Ids ='';
                     //integer idCount = 0;//max 600
                     Ids = createInquery(objectNameToOld_NewId.get(parentRelationInfo[0].toLowerCase()).keySet() , 550);
                     
                     Ids = '('+Ids+')';
                     
                     String whereClause = retrieveFilterOfObject();
                     String parentFieldCheck='';
                     for(String parentField :parentRelations){
                         if(parentFieldCheck == ''){
                             parentFieldCheck = parentField.split('/')[1]+'+!=null+';
                         }else{
                             parentFieldCheck = parentFieldCheck+StaticDataFactory.andWithSpace+parentField.split('/')[1]+'+!=null+';
                         }
                     }
                     if(whereClause!=null && whereClause!=''){
                         whereClause =whereClause +StaticDataFactory.andWithSpace+parentFieldCheck;
                     }else{
                         whereClause = '+where+'+parentFieldCheck+'+';
                     }
                     if( !(currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzProductSpec 
                           || currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzProductMedia
                           ||  currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzProductCategory
                           ||  currentsObject.sObjectAPIName__c == 'AccountContactRelation') ){
                               endpointUrl = returnEndpointURL(whereClause,Ids,parentRelationInfo);
                               System.debug('returnsObjectData-endpointUrl>'+endpointUrl); 
                               //parent field must be null , if for the sobject parent exists.
                               returnsObjectData(endpointUrl,true,parentRelationInfo); 
                           }else{
                               // process child records of Products and AccountContactRealtion , product size can be > 500//
                               endpointUrl = objAuthenticationInfo.instance_url+StaticDataFactory.endURL+StaticDataFactory.selectwithSpace+currentsObject.Fields__c+StaticDataFactory.fromWithSpace+currentsObject.sObjectAPIName__c;
                               if(whereClause !=null && whereClause!='' ){
                                   endpointUrl=endpointUrl+whereClause; 
                               }    
                               processChildRecordsOfProducts(endpointUrl,whereClause);
                               // }
                               
                           }
                     
                 }else{
                     String whereClause ='';
                     System.debug('******************');
                     //if parent exist for this sobject for now only for single for single parent.
                     endpointUrl = objAuthenticationInfo.instance_url+StaticDataFactory.endURL+StaticDataFactory.selectwithSpace+currentsObject.Fields__c+StaticDataFactory.fromWithSpace+currentsObject.sObjectAPIName__c; 
                     
                     whereClause = retrieveFilterOfObject();
                     if(whereClause !=null && whereClause!='' ){
                         endpointUrl=endpointUrl+whereClause; 
                     }
                     if(currentsObject.Parent_Relations__c != '' && currentsObject.Parent_Relations__c != null){
                         parentRelations = currentsObject.Parent_Relations__c.split('-');
                     }
                     if(currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzPriceList){
                         
                         buildQueryForObject(endpointUrl,whereClause);
                     }
                     else if(currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzProduct){
                         
                         buildQueryForObject(endpointUrl,whereClause);
                     }
                     
                     if(currentsObject.SObjectRecordLimit__c != null  ){
                         System.debug('***********LIMIT**************');
                         endpointUrl =endpointUrl+'+LIMIT+'+Integer.valueOf(currentsObject.SObjectRecordLimit__c); 
                         
                     }
                     
                     if( !(currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzProduct || currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzPriceList) ){
                         returnsObjectData(endpointUrl,false,new List<String>());
                     }
                     
                 }
            
        }catch(Exception e){
            System.debug('get exeption on line number-->'+e.getLineNumber()+' error is-->'+e.getMessage());
        }
    }
    
    
    /*
* Method Name	: processChildRecordsOfProducts
* Description	: this method will process the child record of Products , where ParentId size > 500

*/
    public void processChildRecordsOfProducts(String sobjectQuery,String whereClause){
        String endpointUrl = sobjectQuery;
        List<Integer> elementsTobeRemoved = new List<Integer>();// delete the elements from the list
        Integer parentIdLimit = 520;
        if(Test.isRunningTest()){
            parentIdLimit = 2;
        }
        //String endpointUrlClone = endpointUrl;
        System.debug(parentRelations[0].split('/')[1]+'parentRelations-processChildRecordsOfProducts->'+parentRelations);
        List<Sobject> objectTobeInserted = new List<Sobject>();
        Integer idCount = 0;//max 500
        String recordIds = '';
        Map<String, Object> responseMap = new Map<String, Object>();
        System.debug('parentRelations---->records'+parentRelations[0].split('/')[0]);
        for(String parentId : objectNameToOld_NewId.get(parentRelations[0].split('/')[0].toLowerCase()).keySet() ){
            idCount =  idCount +1;
            if(recordIds ==''){
                recordIds =   '\''+parentId+'\'';
            }else{
                recordIds =recordIds+','+ '\''+parentId+'\''; 
            }
            if(Math.mod(idCount, parentIdLimit) == 0){
                recordIds = '('+recordIds+')';
                endpointUrl = endpointUrl+StaticDataFactory.andWithSpace+parentRelations[0].split('/')[1]+StaticDataFactory.inWithSpace+recordIds;
                if(currentsObject.sObjectAPIName__c == 'AccountContactRelation'){
                    endpointUrl = endpointUrl+'+AND+IsDirect=false';
                }
                
                System.debug('endpointUrl2-->>>>>'+endpointUrl);
                while(endpointUrl!='' && endpointUrl!=null){
                    responseMap = fetchSobejctData(endpointUrl);
                    if(responseMap.containsKey('nextRecordsUrl')){
                        endpointUrl = objAuthenticationInfo.instance_url+(String)responseMap.get('nextRecordsUrl');
                    }else{
                        endpointUrl = '';
                    }
                    recordIds = '';
                    objectTobeInserted.addAll((List<Sobject>)JSON.deserialize(JSON.serializePretty(responseMap.get(StaticDataFactory.records)), List<Sobject>.Class));
                }
                endpointUrl = sobjectQuery;
            }	            
        }
        
        if(recordIds != '' && recordIds != null){
            recordIds = '('+recordIds+')';
            endpointUrl = endpointUrl+StaticDataFactory.andWithSpace+parentRelations[0].split('/')[1]+StaticDataFactory.inWithSpace+recordIds;
            if(currentsObject.sObjectAPIName__c == 'AccountContactRelation'){
                endpointUrl = endpointUrl+'+AND+IsDirect=false';
                System.debug('endpointUrl4-->>>>>'+endpointUrl);
            }
            System.debug('endpointUrl-->>1-'+endpointUrl);
            responseMap = fetchSobejctData(endpointUrl);
            recordIds = '';
            
            objectTobeInserted.addAll((List<Sobject>)JSON.deserialize(JSON.serializePretty(responseMap.get(StaticDataFactory.records)), List<Sobject>.Class));
        }
        System.debug('objectTobeInserted--'+objectTobeInserted.size());
        List<Sobject> objectTobeInsertedClone = (List<Sobject>)JSON.deserialize(JSON.serializePretty(objectTobeInserted), List<Sobject>.Class);
        List<String> parentRelationInfo;
        Integer length = objectTobeInserted.size();
        for(Integer SobjectIns=0;SobjectIns<length;SobjectIns++){
            
            objectTobeInserted[SobjectIns].Id = null;
            for(String parentRelationInfoVar:parentRelations){
                parentRelationInfo = parentRelationInfoVar.split('/');
                System.debug('parentRelationInfo--->'+parentRelationInfo);
                System.debug(objectTobeInserted[SobjectIns].get(parentRelationInfo[1]) +'-SobjectIns.get(parentRelationInfo[1])--'+objectNameToOld_NewId.get(parentRelationInfo[0].toLowerCase()).get((String)objectTobeInserted[SobjectIns].get(parentRelationInfo[1])));
                if( objectTobeInserted[SobjectIns].get(parentRelationInfo[1]) != null &&
                   ((objectNameToOld_NewId.get(parentRelationInfo[0].toLowerCase())).containsKey((String)objectTobeInserted[SobjectIns].get(parentRelationInfo[1]))) ){
                       objectTobeInserted[SobjectIns].put(parentRelationInfo[1] , (objectNameToOld_NewId.get(parentRelationInfo[0].toLowerCase())).get((String)objectTobeInserted[SobjectIns].get(parentRelationInfo[1])) );
                   }else{
                       elementsTobeRemoved.add(SobjectIns);
                   } 
            }
            
        }
        if(!elementsTobeRemoved.isEmpty()){
            length = objectTobeInserted.size();
            for(Integer count=length-1;count>=0;count--){
                objectTobeInserted.remove(count);
                objectTobeInsertedClone.remove(count);
            }
            
        }
        createOldToNewIdMap(objectTobeInserted,objectTobeInsertedClone,false);
        
    }
    /*
* Method Name	: buildQueryForObject
* Description	: this method will build query only for ccrz__E_Product__c and ccrz__E_PriceList__c
*/
    public void buildQueryForObject(String endpointUrl , String whereClause){
        String Ids ='';
        string field = '';
        //accountgroupPricelist
        String junctionRecordquery ; // store the accountgroupPricelist in case of ccrz__E_PriceList__c and pricelist item in case of ccrz__E_Product__c
        if(currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzPriceList){
            junctionRecordquery = objAuthenticationInfo.instance_url+StaticDataFactory.endURL+'Select+Id,ccrz__AccountGroup__c,ccrz__Pricelist__c+from+ccrz__E_AccountGroupPriceList__c+WHERE+ccrz__Pricelist__c+!=null+AND+ccrz__AccountGroup__c+IN+';
            Ids = createInquery(objectNameToOld_NewId.get(StaticDataFactory.ccrzAccountGroup.toLowerCase()).keySet() , 500);
            field = 'ccrz__Pricelist__c';
        }else if (currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzProduct){
            junctionRecordquery = objAuthenticationInfo.instance_url+StaticDataFactory.endURL+'Select+Id,ccrz__Product__c+from+ccrz__E_PriceListItem__c+WHERE+ccrz__Product__c+!=NULL+AND+ccrz__Pricelist__c+IN+';
            Ids = createInquery(objectNameToOld_NewId.get(StaticDataFactory.ccrzPriceList.toLowerCase()).keySet() , 500);
            field = 'ccrz__Product__c';
        }
        Ids = '('+Ids+')';// store the accountgroup Ids in case of ccrz__E_PriceList__c and pricelist id in case of ccrz__E_Product__c
        junctionRecordquery = junctionRecordquery+Ids;
        System.debug('junctionRecordlist-->'+junctionRecordquery);
        fetchAllJunctionRecord(endpointUrl,junctionRecordquery,field,whereClause);
        
        
    }
    
    /*
* Method Name	: fetchAllJunctionRecord
* Description	: this method fetch the junction records (AccountGroupPricelIst and PriceListitem)
and then PriceList and Products will gets inserted respectivley.
*/
    public void fetchAllJunctionRecord(String sobjectQuery,String junctionRecordUrl,String field ,String whereClause){
        String endpointUrl = sobjectQuery;
        String junctionRecordquery = junctionRecordUrl;
        List<Sobject> junctionRecordList = new List<Sobject>();
        List<Sobject> objectTobeInserted = new List<Sobject>();
        Map<String, Object> responseMap = new Map<String, Object>();
        String recordIds =''; // store the Pricelist Ids in case of ccrz__E_PriceList__c and products ids item in case of ccrz__E_Product__c
        Integer idCount = 0;//max 500
        Integer parentIdLimit = 520;
        if(Test.isRunningTest()){
            parentIdLimit = 2;
        }
        Set<String> processedIds = new Set<String>();
        while(junctionRecordquery !='' && junctionRecordquery!=null){
            System.debug('junctionRecordquery-------->'+junctionRecordquery);
            responseMap = fetchSobejctData(junctionRecordquery);
            if(responseMap.containsKey('nextRecordsUrl')){
                junctionRecordquery = objAuthenticationInfo.instance_url+(String)responseMap.get('nextRecordsUrl');
            }else{
                junctionRecordquery = '';
            }
            junctionRecordList.addAll((List<Sobject>)JSON.deserialize(JSON.serializePretty(responseMap.get(StaticDataFactory.records)), List<Sobject>.Class)); 
            System.debug('junctionRecordList-size-'+junctionRecordList.size());
            responseMap.clear();
            for(Sobject accountGrpsobjectvar : junctionRecordList ){
                if(accountGrpsobjectvar.get(field) != null && accountGrpsobjectvar.get(field) != '' && ( !processedIds.contains((String)accountGrpsobjectvar.get(field)) )  ){                      
                    idCount = idCount + 1;
                    processedIds.add((String)accountGrpsobjectvar.get(field));
                    if(recordIds ==''){
                        recordIds =   '\''+accountGrpsobjectvar.get(field)+'\'';
                    }else{
                        recordIds =recordIds+','+ '\''+accountGrpsobjectvar.get(field)+'\''; 
                    }
                    
                }
                if( Math.mod(idCount, parentIdLimit) == 0){
                    recordIds = '('+recordIds+')';
                    //call method to fetch the products
                    if(whereClause !=null && whereClause!='' ){
                        endpointUrl=endpointUrl+'+AND+Id+IN+'+recordIds; 
                        System.debug('endpointUrl21--->'+endpointUrl);
                    }else{
                        endpointUrl=endpointUrl+StaticDataFactory.whereWithId+recordIds; 
                        System.debug('endpointUrl41--->'+endpointUrl);
                    }
                    responseMap = fetchSobejctData(endpointUrl);
                    recordIds = '';
                    objectTobeInserted.addAll((List<Sobject>)JSON.deserialize(JSON.serializePretty(responseMap.get(StaticDataFactory.records)), List<Sobject>.Class));
                    endpointUrl = sobjectQuery;
                }
            }
            
        }
        junctionRecordList.clear();
        if(recordIds != '' && recordIds != null){
            recordIds = '('+recordIds+')';
            if(whereClause !=null && whereClause!='' ){
                endpointUrl=endpointUrl+'+AND+Id+IN+'+recordIds; 
                System.debug('endpointUrl21--->'+endpointUrl);
            }else{
                endpointUrl=endpointUrl+StaticDataFactory.whereWithId+recordIds; 
                System.debug('endpointUrl41--->'+endpointUrl);
            }
            responseMap = fetchSobejctData(endpointUrl);
            recordIds = '';
            objectTobeInserted.addAll((List<Sobject>)JSON.deserialize(JSON.serializePretty(responseMap.get(StaticDataFactory.records)), List<Sobject>.Class));
        }
        List<Sobject> objectTobeInsertedClone = (List<Sobject>)JSON.deserialize(JSON.serializePretty(objectTobeInserted), List<Sobject>.Class);
        for(Sobject SobjectIns : objectTobeInserted){
            SobjectIns.Id = null;
        }
        System.debug('objectTobeInsertedClone->'+objectTobeInsertedClone.size());
        createOldToNewIdMap(objectTobeInserted,objectTobeInsertedClone,true);
        
    }
    /*
* Method Name	: fetchSobejctData
* Description	: this method hit the Endpoint and return the data
*/
    public Map<String, Object> fetchSobejctData(String endpointUrl ){
        System.debug('endpointUrl-fetchSobejctData->'+endpointUrl);
        HttpRequest httpRequest = new HttpRequest();  
        httpRequest.setMethod('GET'); //grant-type:jwt-bearer  
        httpRequest.setHeader('Authorization', 'Bearer' + ' ' + accessToken); 
        httpRequest.setEndpoint(endpointUrl);  
        httpRequest.setTimeout(50000);  
        Http http = new Http();   
        HttpResponse httpResponse = http.send(httpRequest);  
        if (httpResponse.getStatusCode() == 200 ) { 
            Map<String, Object> responseMap = new Map<String, Object>();
            System.debug('response body-->'+httpResponse.getBody());
            responseMap = (Map<String, Object>)JSON.deserializeUntyped(httpResponse.getBody());
            return responseMap;
        }else{
            System.debug(' httpResponse ' + httpResponse.getBody() );  
            throw new CalloutException( httpResponse.getBody() );
            
        }
    }
    
    /*
* Method Name	: fetchSobejctData
* Description	: this method runs in recusion mode and add fetched the particular Sobject and 
Creates relationship
*/
    public void returnsObjectData(String endpointUrl , boolean isChild ,List<String> parentRelationInfoValue){
        try{
            List<String> parentRelationInfo = parentRelationInfoValue;
            List<Sobject> sobjectList = new List<Sobject>();
            List<Sobject> sobjectListClone = new List<Sobject>();
            String Ids =''; // soldtoAccountIds
            //saveresultList = new List<Database.SaveResult>();
            System.debug('endpointUrl--->'+endpointUrl);
            system.debug('***********returnsObjectData**************');
            System.debug('currentsObject-------->'+currentsObject);
            System.debug('accessToken-------->'+accessToken);
            Map<String, Object> responseMap = new Map<String, Object>();
            responseMap = fetchSobejctData(endpointUrl);
            String nextQueryLink='';
            
            if (responseMap !=null && (!responseMap.isEmpty()) ) { 
                System.debug('***************************************8');
                
                
                for(String resString:responseMap.keySet()){
                    System.debug('-----output--->'+responseMap.get(resString));
                }
                if(responseMap.containsKey('nextRecordsUrl')){
                    nextQueryLink = (String)responseMap.get('nextRecordsUrl');
                }
                System.debug('responseMap->'+responseMap);
                System.debug('nextQueryLink->'+nextQueryLink);
                
                // insert the below list first set the Id to null
                if(!isChild){
                    System.debug('*******not child**********');
                    sobjectList.addAll((List<Sobject>)JSON.deserialize(JSON.serializePretty(responseMap.get(StaticDataFactory.records)), List<Sobject>.Class));                   
                    System.debug('sobjectList-------->'+sobjectList);
                    
                    
                }else{
                    
                    Boolean isSoldToAccount =  false;
                    //integer idCount = 0;
                    System.debug('child record-->'+responseMap.get(StaticDataFactory.records));
                    List<SObject> sobjectList1 = new List<SObject>();
                    List<SObject> sobjectList2 = new List<SObject>();
                    //String soldToAccountIds = '';
                    List<Object> responseMapList =(List<Object>)JSON.deserializeUntyped( JSON.serializePretty(responseMap.get(StaticDataFactory.records)) );
                    responseMap = null;
                    for(Object ss : responseMapList){
                        System.debug(ss+'=================================');
                        Map<String, Object> m = (Map<String, Object>) JSON.deserializeUntyped(JSON.serialize(ss));
                        for(String childKey :  m.keySet()){
                            System.debug(childKey+'--------------'+m.get(childKey));
                            if( m.get(childKey) != null && ( childKey.containsIgnoreCase('__r') || childKey == parentRelationInfo[2]  )   ){
                                Map<String, Object> m1 = (Map<String, Object>) JSON.deserializeUntyped(JSON.serialize( m.get(childKey)));
                                sobjectList1 = (List<Sobject>)JSON.deserialize(JSON.serializePretty(m1.get(StaticDataFactory.records)), List<Sobject>.Class);
                                
                                if( currentsObject.sObjectAPIName__c == StaticDataFactory.accountString ){
                                    sobjectList1 = (List<Sobject>)JSON.deserialize(JSON.serializePretty(m1.get(StaticDataFactory.records)), List<Sobject>.Class);
                                    for(Sobject sobjectvar : sobjectList1){
                                        System.debug('RecordtypeId-->'+sobjectvar.get('RecordtypeId'));
                                        if(isSoldToAccount){
                                            break;
                                        }
                                        if(sourceAccountRecordTypeNameToIdMap.get(String.valueOf(sobjectvar.get('RecordtypeId'))) == 'EC_SoldTo'){
                                            isSoldToAccount = true; // if anyone recordtype is sold to then do not insert ship to accounts
                                            sobjectList.add(sobjectvar);
                                            sobjectList2 =  new List<SObject>();
                                            if(Ids ==''){
                                                Ids =   '\''+String.valueOf(sobjectvar.get('Id'))+'\'';
                                            }
                                            Ids =Ids+','+ '\''+String.valueOf(sobjectvar.get('Id'))+'\'';
                                        }else{
                                            sobjectList2.add(sobjectvar);  // add only if all the related accounts to account group are shipto Accounts
                                            
                                        }
                                        System.debug('recordtypeIdtobeassigned'+targetAccountRecordTypeNameToIdMap.get(String.valueOf(sobjectvar.get('RecordtypeId'))));
                                        sobjectvar.put('RecordtypeId',targetAccountRecordTypeNameToIdMap.get( sourceAccountRecordTypeNameToIdMap.get(String.valueOf(sobjectvar.get('RecordtypeId')))));
                                    } 
                                    if(!isSoldToAccount){
                                        if(sobjectList.isEmpty()){
                                            sobjectList = sobjectList2;
                                        }else{
                                            sobjectList.addAll(sobjectList2);
                                        }  
                                    }
                                    isSoldToAccount = false;
                                    
                                }else{
                                    sobjectList.addAll((List<Sobject>)JSON.deserialize(JSON.serializePretty(m1.get(StaticDataFactory.records)), List<Sobject>.Class));
                                }
                                
                                System.debug('sobjectList=='+sobjectList[0]);
                            }
                        }
                        
                        
                    }
                    
                }
                System.debug('sobjectList--->'+sobjectList);
                System.debug('sobjectList--->'+sobjectList);
                
                responseMap = new Map<String, Object>();
                
            } else {  
                System.debug('***********RESPONSE MAP IS NULL******************' );
                
            }
            //if nextQueryLink is not blank that is more records exits
            if(nextQueryLink!=''){
                System.debug('again retreiuve data for link-->'+nextQueryLink);
                returnsObjectData(objAuthenticationInfo.instance_url+nextQueryLink,isChild,parentRelationInfo);
            }else{
                List<Integer> elementsTobeRemoved = new List<Integer>();
                sobjectListClone=(List<Sobject>)JSON.deserialize(JSON.serializePretty(sobjectList), List<Sobject>.Class);
                System.debug('sobjectListClone--->'+sobjectListClone.size());
                System.debug('sobjectList--->'+sobjectList.size());
                System.debug('parentRelationInfo****----->>>>>>>'+parentRelationInfo);
                Integer length = sobjectList.size();
                for(Integer SobjectIns=0;SobjectIns<length; SobjectIns++){
                    //System.debug('set the sobjectId to null');
                    sobjectList[SobjectIns].Id = null;
                    if(currentsObject.sObjectAPIName__c ==StaticDataFactory.ccrzProduct){
                        // SobjectIns.put('lastmodifieddate',null); 
                    }
                    if(isChild || (currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzMenu  
                                   || currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzProductSpec 
                                   || currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzProductMedia || currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzProductCategory 
                                   || currentsObject.sObjectAPIName__c == 'ccrz__E_ConfigurationMeta__c'
                                   || currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzConfiguration) ){
                                       System.debug('parentRelations--->'+parentRelations);
                                       for(String parentRelationInfoVar:parentRelations){
                                           parentRelationInfo = parentRelationInfoVar.split('/');
                                           System.debug('parentRelationInfo--->'+parentRelationInfo);
                                           System.debug('SobjectIns.get(parentRelationInfo[1])--'+sobjectList[SobjectIns].get(parentRelationInfo[1]));
                                           if( sobjectList[SobjectIns].get(parentRelationInfo[1]) != null &&
                                              (( objectNameToOld_NewId.get(parentRelationInfo[0].toLowerCase())).containsKey((String)sobjectList[SobjectIns].get(parentRelationInfo[1]))) ){
                                                  sobjectList[SobjectIns].put(parentRelationInfo[1] , (objectNameToOld_NewId.get(parentRelationInfo[0].toLowerCase())).get((String)sobjectList[SobjectIns].get(parentRelationInfo[1])) );
                                              }else{
                                                  if(currentsObject.sObjectAPIName__c != StaticDataFactory.ccrzMenu){
                                                      elementsTobeRemoved.add(SobjectIns);                                                  
                                                      
                                                  }
                                              } 
                                       }
                                   }
                }
                
                if(!elementsTobeRemoved.isEmpty()){
                    length = elementsTobeRemoved.size();
                    for(Integer count=length-1;count>=0;count--){
                        sobjectList.remove(count);
                        sobjectListClone.remove(count);
                    }
                }
                // fetch the childs of sold of Accounts 
                if(currentsObject.sObjectAPIName__c == StaticDataFactory.accountString){
                    System.debug('fetch the child Account os sold to Accounts');
                    getChildAccounts(Ids,sobjectList,sobjectListClone);
                }else{ 
                    if( !(currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzProductCategory || currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzProductSpec
                          || currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzProductMedia || currentsObject.sObjectAPIName__c == 'ccrz__E_RelatedProduct__c'
                          || currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzMenu || currentsObject.sObjectAPIName__c == StaticDataFactory.ccrzConfiguration
                          || currentsObject.sObjectAPIName__c == 'ccrz__E_PageLabel__c' || currentsObject.sObjectAPIName__c == 'ccrz__E_AccountGroupPriceList__c') ) {
                              //objectNameToOld_NewId.put(currentsObject.sObjectAPIName__c ,oldToNewIdMap );// scobject to Old to new Id map
                              if(!sobjectList.isEmpty()){
                                  createOldToNewIdMap(sobjectList,sobjectListClone,true);  
                                  
                              }
                          }else{
                              if(!sobjectList.isEmpty()){
                                  createOldToNewIdMap(sobjectList,sobjectListClone,false);  
                                  
                              }
                          }
                    
                    
                }
                
            }
            System.debug('Limits.getHeapSize()--->'+Limits.getHeapSize() +'==Limits.getLimitHeapSize()--'+Limits.getLimitHeapSize());   
        }catch(Exception e){
            System.debug('get exeption on line number-->'+e.getLineNumber()+' error is-->'+e.getMessage());
        }
    }
    
    /*
* Method Name	: getChildAccounts
* Description	: this method fetch the Child Accounts of Sold to Accounts
*/
    public void getChildAccounts(String SobjectIds , List<Sobject> sobjectListparent , List<Sobject> sobjectListparentClone){
        String Ids = SobjectIds;
        if( Ids!='' && Ids!=null)
            Ids = '('+Ids+')';
        List<Sobject> sobjectList = new List<Sobject>();
        List<Sobject> sobjectListClone = new List<Sobject>();
        objAuthenticationInfo = getAccessToken();
        accessToken = objAuthenticationInfo.access_token;
        String endpointUrl =  objAuthenticationInfo.instance_url+'/services/data/v49.0/query/?q=Select+Id,(Select+Id,ParentId,'+currentsObject.Fields__c+'+FROM+ChildAccounts)'+StaticDataFactory.fromWithSpace+currentsObject.sObjectAPIName__c+StaticDataFactory.whereWithId+Ids;
        Map<String, Object> responseMap = new Map<String, Object>(); 
        System.debug('Ids------------------>'+Ids);
        if( Ids!='' && Ids!=null){
            System.debug('FETCH CHDILD ACCOUNTS');
            responseMap = fetchSobejctData(endpointUrl);
            
        }
        
        //parentAccountinserted here
        createOldToNewIdMap(sobjectListparent,sobjectListparentClone,true);
        
        System.debug('responseMap---getChildAccounts>'+responseMap);
        if (responseMap !=null && (!responseMap.isEmpty()) ) { 
            List<Object> responseMapList =(List<Object>)JSON.deserializeUntyped( JSON.serializePretty(responseMap.get(StaticDataFactory.records)) );
            System.debug('responseMapList--->'+responseMapList);
            responseMap = null;
            for(Object ss : responseMapList){
                System.debug(ss+'=================================');
                Map<String, Object> m = (Map<String, Object>) JSON.deserializeUntyped(JSON.serialize(ss));
                for(String childKey :  m.keySet()){
                    System.debug(childKey+'--------------'+m.get(childKey));
                    if( m.get(childKey) != null && ( childKey.containsIgnoreCase('ChildAccounts')   )   ){
                        Map<String, Object> m1 = (Map<String, Object>) JSON.deserializeUntyped(JSON.serialize( m.get(childKey)));
                        sobjectList.addAll((List<Sobject>)JSON.deserialize(JSON.serializePretty(m1.get(StaticDataFactory.records)), List<Sobject>.Class));
                        System.debug('sobjectList=='+sobjectList[0]);
                    }
                }
            }
        }
        sobjectListClone=(List<Sobject>)JSON.deserialize(JSON.serializePretty(sobjectList), List<Sobject>.Class);
        for(Sobject SobjectIns : sobjectList){
            SobjectIns.Id = null;
            SobjectIns.put('ParentId',objectNameToOld_NewId.get(StaticDataFactory.accountString.toLowerCase()).get( String.valueOf(SobjectIns.get('ParentId')) ));
            SobjectIns.put(StaticDataFactory.ccrzAccountGroup,objectNameToOld_NewId.get(StaticDataFactory.ccrzAccountGroup.toLowerCase()).get( String.valueOf(SobjectIns.get(StaticDataFactory.ccrzAccountGroup)) ) );
            System.debug('SobjectInsFORCHILDACCOUNT___------>'+SobjectIns); 
            SobjectIns.put('RecordtypeId',targetAccountRecordTypeNameToIdMap.get( sourceAccountRecordTypeNameToIdMap.get(String.valueOf(SobjectIns.get('RecordtypeId')))));
            
        }
        if(!sobjectList.isEmpty())
            createOldToNewIdMap(sobjectList,sobjectListClone,true);
        
    }
    /*
* Method Name	: createOldToNewIdMap
* Description	: this method Create a Map Of Old vs New Id for all the required Sobjects
*/
    public void createOldToNewIdMap(List<Sobject> sobjectListparent , List<Sobject> sobjectListparentClone, Boolean holdValue){
        List<Database.SaveResult> saveresultList = new List<Database.SaveResult>();
        
        Map<String,String> oldToNewIdMap = new Map<String,string>();
        if( objectNameToOld_NewId.containsKey(currentsObject.sObjectAPIName__c.toLowerCase()) ){
            oldToNewIdMap = objectNameToOld_NewId.get(currentsObject.sObjectAPIName__c.toLowerCase());
        }
        saveresultList = Database.insert(sobjectListparent,false);
        
        for(Integer counter = 0 ; counter < saveresultList.size() ; counter++){
            System.debug(counter+'---**---'+saveresultList[counter].isSuccess());
            System.debug('sobjectListClone--'+sobjectListparentClone[counter]+'--sobjectList--'+ sobjectListparent[counter]);
            System.debug('--sobjectListClone--'+sobjectListparentClone[counter]+'--sobjectList--'+ sobjectListparent[counter]);
            
            if( saveresultList[counter].isSuccess() ){
                oldToNewIdMap.put(sobjectListparentClone[counter].Id , sobjectListparent[counter].Id);
                System.debug('**********record Created successfully**********'+currentsObject.sObjectAPIName__c);
            }else{
                System.debug('error is--->'+saveresultList[counter].geterrors()[0].getMessage());
            }
            System.debug('oldToNewIdMap-createOldToNewIdMap>'+oldToNewIdMap.size());
        }
        System.debug('saveresultList---->'+saveresultList.size()+'--'+currentsObject.sObjectAPIName__c);
        /* if(currentsObject.sObjectAPIName__c == StaticDataFactory.accountString){
//targetAccountRecordTypeNameToIdMap = new Map<String,String> ();
//sourceAccountRecordTypeNameToIdMap = new Map<String,String> ();
}*/
        if(holdValue)
            objectNameToOld_NewId.put(currentsObject.sObjectAPIName__c.toLowerCase(),oldToNewIdMap);
    }
    public void finish(Database.BatchableContext BC) {
        // execute any post-processing operations
    }
    
    
    
    /*
* Method Name	: getAccessToken
* Description	: this method returns the accessToken
*/
    public static OAuth getAccessToken(){
        
        try{
            List<Post_Refresh_Metadata_Config__mdt> postRefreshMetadataConfigList = new List<Post_Refresh_Metadata_Config__mdt>();
            postRefreshMetadataConfigList = [Select Auth_Token_Url__c, Consumer_Key__c, Consumer_Secret__c, Username__c, Password__c, Request_Body__c, Source_SFDC_Url__c From Post_Refresh_Metadata_Config__mdt where Active__c = true limit 1];
            
            
            final  String ENDPOINT_URL = postRefreshMetadataConfigList[0].Auth_Token_Url__c;
            final  String REQUEST_BODY = postRefreshMetadataConfigList[0].Request_Body__c; 
            final  String USERNAME = postRefreshMetadataConfigList[0].Username__c; 
            final  String PASSWORD = postRefreshMetadataConfigList[0].Password__c;
            final  String CONSUMER_KEY = postRefreshMetadataConfigList[0].Consumer_Key__c; 
            final  String CONSUMER_SECRET = postRefreshMetadataConfigList[0].Consumer_Secret__c;
            
            HttpRequest req = new HttpRequest();
            req.setEndpoint(ENDPOINT_URL);
            req.setMethod('POST');          
            Blob headerValue = Blob.valueOf(USERNAME + ':' + PASSWORD);
            String authorizationHeader = 'BASIC ' + EncodingUtil.base64Encode(headerValue);
            req.setHeader('Authorization', authorizationHeader); 
            req.setBody(String.format(REQUEST_BODY ,new string[]{CONSUMER_KEY,CONSUMER_SECRET, USERNAME,PASSWORD}));
            req.setTimeout(60000);
            Http http = new Http();
            HttpResponse res = http.send(req);
            System.debug('response-->'+res.getbody());
            OAuth objAuthenticationInfo = (OAuth)JSON.deserialize(res.getbody(), OAuth.class);
            return objAuthenticationInfo;
        }catch(CallOutException ce){
            throw ce;
        }
    }
    public class OAuth{
        public String instance_url{get;set;}
        public String access_token{get;set;}    
    }
    
}
